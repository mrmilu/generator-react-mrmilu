<%_ if (hasMobx) { -%>
import React, { useCallback, useContext } from 'react';
<%_ } else { -%>
import React, { useCallback } from 'react';
<%_ } -%>
import { appRoutes } from './common/view/router/routes';
import { RouteWithSubRoutes } from './common/view/router/config';
import { HashRouter as Router, Switch } from 'react-router-dom';
<%_ if (hasTailwind) { -%>
import 'twin.macro';
<%_ } -%>
<%_ if (hasStyledComponents) { -%>
import { AppContainer, AppHeaderContainer } from './app.styles';
<%_ } else { -%>
import './app.styles.scss';
<%_ } -%>
import Title from './common/view/components/title/title.component';
import Button from './common/view/components/button/button.component';
import { useTranslation } from './i18n';
<%_ if (hasRedux) { -%>
import { useReduxSampleName } from './accounts/view/store/sample.hooks';
<%_ } -%>
<%_ if (hasRecoil) { -%>
import { useRecoilState } from 'recoil';
import { sampleName } from './accounts/view/store/sample.atom';
<%_ } -%>
<%_ if (hasMobx) { -%>
import { StoreContext } from './common/view/store/root.store';
import { observer } from 'mobx-react';
<%_ } -%>

function App() {
  const { t, changeLanguage, activeLanguage, languages } = useTranslation();
  <%_ if (hasRedux) { -%>
  const [name, setName, setNameThunk] = useReduxSampleName();
  <%_ } -%>
  <%_ if (hasRecoil) { -%>
  const [name, setName] = useRecoilState(sampleName);
  <%_ } -%>
  <%_ if (hasMobx) { -%>
  const { sampleStore } = useContext(StoreContext);
  <%_ } -%>

  const handleChange = useCallback(
    (lang: string) => {
      void changeLanguage(lang as typeof languages[0]);
    },
    [changeLanguage]
  );

  return (
<%_ if (hasStyledComponents) { -%>
    <AppContainer>
      <AppHeaderContainer>
<%_ } else { -%>
    <div className="App">
      <header className="App-header">
<%_ } -%>
        <select name="lang" id="lang" value={activeLanguage} onChange={(e) => handleChange(e.target.value)}>
          {languages.map((lang) => (
            <option key={lang} value={lang}>{lang.toUpperCase()}</option>
          ))}
        </select>
        <p<%_ if (hasTailwind) { -%> tw="bg-green-200" <%_ } -%>>{t('title')}</p>
        <Title>Title component</Title>
        <Router>
            <Switch>
              {appRoutes.map((route, idx) => (
              <RouteWithSubRoutes key={idx} {...route} />
              ))}
            </Switch>
        </Router>
          <%_ if (hasMobx) { -%>
          {sampleStore.sampleName}
          <Button onClick={() => sampleStore.setSampleName('clicked!')}>Test button</Button>
          <br />
          <Button onClick={() => sampleStore.sampleAsyncAction('clicked! thunk')}>Test button (thunk)</Button>
          <%_ } else { -%>
          {name}
          <Button onClick={() => setName('clicked!')}>Test button</Button>
          <br />
          <Button onClick={() => setNameThunk('clicked! thunk')}>Test button (thunk)</Button>
          <%_ } -%>
<%_ if (hasStyledComponents) { -%>
      </AppHeaderContainer>
    </AppContainer>
<%_ } else { -%>
      </header>
    </div>
<%_ } -%>
  );
}

<%_ if (hasMobx) { -%>
export default React.memo(observer(App));
<%_ } else { -%>
export default React.memo(App);
<%_ } -%>
