import React from 'react';
import ReactDOM from 'react-dom';
import * as Sentry from '@sentry/react';
<%_ if (hasRedux) { -%>
import { Provider } from 'react-redux';
import store from './common/view/store/store';
<%_ } -%>
<%_ if (hasRecoil) { -%>
import { RecoilRoot } from 'recoil';
<%_ } -%>
<%_ if (hasMobx) { -%>
import { RootStore, StoreContext } from './common/view/store/root.store';
<%_ } -%>
import App from './app.component';
import './assets/reset.scss';
import './index.scss';
<%_ if (hasTailwind) { -%>
import './assets/tailwind.parsed.css';
<%_ } -%>
import { ConfigEnv } from './common/config.env';

Sentry.init({
  dsn: ConfigEnv.SENTRY_URL,
  release: `${ConfigEnv.PACKAGE_NAME}-${ConfigEnv.NODE_ENV}@${ConfigEnv.PACKAGE_VERSION}`
});

ReactDOM.render(
  <Sentry.ErrorBoundary fallback="An error has occurred">
    <React.StrictMode>
<%_ if (hasRedux) { -%>
      <Provider store={store}>
<%_ } -%>
<%_ if (hasRecoil) { -%>
      <RecoilRoot>
<%_ } -%>
<%_ if (hasMobx) { -%>
      <StoreContext.Provider value={new RootStore()}>
<%_ } -%>
      <App />
<%_ if (hasRedux) { -%>
      </Provider>
<%_ } -%>
<%_ if (hasRecoil) { -%>
      </RecoilRoot>
<%_ } -%>
<%_ if (hasMobx) { -%>
      </StoreContext.Provider>
<%_ } -%>
    </React.StrictMode>
  </Sentry.ErrorBoundary>,
  document.getElementById('root')
);

// Hot Module Replacement (HMR) - Remove this snippet to remove HMR.
// Learn more: https://snowpack.dev/concepts/hot-module-replacement
if (ConfigEnv.IS_DEV && import.meta?.hot) {
  /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-call */
  import.meta.hot.accept();
}
