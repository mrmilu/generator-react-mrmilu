import React, { PropsWithChildren, useCallback } from 'react';
import Title from '../title/title.component';
<%_ if (hasRedux) { -%>
import { useReduxSampleName } from '../../state/sample/sample.hooks';
<%_ } -%>
<%_ if (hasRecoil) { -%>
import { useRecoilState } from 'recoil';
import { sampleName } from '../../state/sample/sample.atom';
<%_ } -%>

export type ButtonProps = Required<PropsWithChildren<unknown>> & {
  /**
   * Indicates if button is disabled
   */
  disabled?: boolean;
  /**
   * Click event
   */
  onClick?: () => void;
};

function Button({ children, disabled, onClick }: ButtonProps) {
<%_ if (hasRedux) { -%>
  const [name, setName] = useReduxSampleName();
<%_ } -%>
<%_ if (hasRecoil) { -%>
  const [name, setName] = useRecoilState(sampleName);
<%_ } -%>

  const clickHandler = useCallback(() => {
    setName('clicked!');
    if (!disabled && onClick) {
      onClick();
    }
  }, [disabled, onClick, setName]);

  return (
    <button onClick={clickHandler}>
      {name}
      <Title>This is a button</Title>
      {children}
    </button>
  );
}

export default React.memo(Button);
